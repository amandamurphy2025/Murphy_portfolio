class Version:
    """
    A class to represent a semantic version which includes a:  
        - major version number  
        - an optional minor number  
        - an optional patch number  
    A published library will have an exact version with major, minor, and patch
    values, such as 1.0.3 where 1 is the major, 0 is the minor, and 3 is the
    patch. A version used for searching or library matching could be partial,
    such as 1, 1., 2.1 or 2.1.
    """
    def __init__(self, version_str):
        """
        Create a new Version instance based on a version string in the form of
        X, X., X.Y, X.Y., or X.Y.Z where X,Y,and Z are natural numbers.
        Inputs:
            version_str(str): The given semantic version number
        """
        
        #v = version_str.split(".")

        #for idx, val in enumerate(v):
         #   if v[idx] != "":
          #      v[idx] = int(val)
           # elif v[idx] == "":
            #    v.remove(v[idx])

        #while len(v) < 3:
         #   v.append(-1)

        #v = tuple(v)

        self.v = version_str



    def compare_version(self, other):
        """
        Check if this version is smaller, the same, or greater than the
        other version. If a version is partial assume the missing components
        are the smallest possible value (e.g. < 0).
        Inputs:
            other (Version): a Version to compare against
        Returns (int):  
            -1 if self is smaller than other,  
            0 if they have the same version number,  
            1 if  self is larger than other
        """
        assert isinstance(other, Version)

        v = self.v.split(".")

        for idx, val in enumerate(v):
            if v[idx] != "":
                v[idx] = int(val)
            elif v[idx] == "":
                v.remove(v[idx])

        while len(v) < 3:
            v.append(-1)

        v = tuple(v)

        o = other.v.split(".")

        for idx, val in enumerate(o):
            if o[idx] != "":
                o[idx] = int(val)
            elif o[idx] == "":
                o.remove(o[idx])

        while len(o) < 3:
            o.append(-1)

        o = tuple(o)

        maj, min, pat = o
        vmaj, vmin, vpat = v

        if self.v == other.v:
            return 0

        if vmaj < maj:
            return -1

        if vmaj > maj:
            return 1

        if vmaj == maj and vmin != min:
            if vmin < min:
                return -1
            if vmin > min:
                return 1
    
        if vmaj == maj and vmin == min:
            if vpat < pat:
                return -1
            if vpat > pat:
                return 1
        
    def meets_requirement(self, req):
        """
        Checks to see if this version satisfies the requirement.
        Req is a version that was initialized with a string like
        X, X., X.Y, X.Y., or X.Y.Z,
        where X is the major number, Y is the minor, and Z is patch.
        For exact requirement versions (X.Y.Z) this Version will evaluate to
        True if the versions are the same.
        For partial requirement versions (e.g. X or X.Y) this Version will
        evaluate to true if the given parts (X and/or Y) are the same.
      
        Inputs:  
            req(Version): The required version
        Output(bool): If this Version satisfies the requirement
        """

        v = self.v.split(".")

        for idx, val in enumerate(v):
            if v[idx] != "":
                v[idx] = int(val)
            elif v[idx] == "":
                v.remove(v[idx])

        while len(v) < 3:
            v.append(-1)

        v = tuple(v)

        r = req.v.split(".")

        for idx, val in enumerate(r):
            if r[idx] != "":
                r[idx] = int(val)
            elif r[idx] == "":
                r.remove(r[idx])

        while len(r) < 3:
            r.append(-1)

        r = tuple(r)

        maj, min, pat = r
        vmaj, vmin, vpat = v

        if pat != -1 and min != -1 and maj != -1:
            if self.v == req.v:
                return True
            if self.v != req.v:
                return False

        if pat == -1 and min != -1 and maj != -1:
            if maj == vmaj and min == vmin:
                return True
            else:
                return False

        if pat == -1 and min == -1 and maj != -1:
            if maj == vmaj:
                return True
            else:
                return False
                
                

def make_tuple(version):
    """
    takes a version of the form "#.#.#" which can have any amount of integers
    up to 3, and can have trailing periods.  Turns this into a tuple of the
    form (#, #, #).
    
    Input:
        version (str): version number as a string
    Output:
        tuple: tuple with the integers of the version as values
    """
    
    v = version.split(".")

    for idx, val in enumerate(v):
        if v[idx] != "":
            v[idx] = int(val)
        elif v[idx] == "":
            v.remove(v[idx])

    v = tuple(v)

    return v


class LibraryException(Exception):
    """
    A simple exception for described error conditions. You should not
    modify this Class at all.
    """
    pass


class Library:
    """
    A class to represent a published library. This will have:  
        - A name  
        - An exact version (major, minor, and patch)  
        - is_testing flag/attribute which indicates this library is "not ready"
    """
    def __init__(self,
                 name,  # Name of the library
                 version,  # Version number
                 is_testing = False,  # Library is in testing
                 dependencies = None):
        """
        Create a new library. Raise a LibraryException if the version is not 
        exact.
        Inputs:  
            name(str): The name of the library  
            version(str): The semantic version number  
            is_testing(bool): If the library is for testing only  
        """


        self.name = name

        self.is_testing = is_testing

        if dependencies != None:
            for libr in dependencies:
                if len(make_tuple(libr.version.v)) != 3:
                    raise LibraryException("Exception")
                if libr.is_testing == True:
                    raise LibraryException("Exception")

        names = []
        if dependencies != None:
            for lib in dependencies:
                names.append(lib.name)
        
        n = list(set(names))
        if len(n) < len(names):
            raise LibraryException("Exception")


        self.dependencies = dependencies

        self.version = Version(version)

        Version.__init__(self, version)

  
    def compare_version(self, other):
        """
        Check if this version is smaller, the same, or greater than the
        other version. Throws a Library Exception if the names are not the same.
        Inputs:  
            other (Library): a Library to compare against
        Returns (int):  
          -1 if self is smaller than other,  
          0 if they have the same version number,  
          1 if self is larger than other
        """
        assert isinstance(other, Library)

        if self.name != other.name:
            raise LibraryException("Exception")

        return self.version.compare_version(other.version)   
   
    def meets_version_req(self, version_needed):
        """
        Checks if this Library meets the version number requirement.
        Inputs:  
            version_number(str): The required version as a string  
        Returns (bool): If the library meets the requirement
        """
        assert isinstance(version_needed, str)

        v = Version(version_needed)

        return self.version.meets_requirement(v)

    def equals(self, lib):

        if self.name == lib.name and self.version == lib.version:
            return True

    def check_cycle(self, lib):

        if self.name == lib.name:
            raise LibraryException("Exception")

        deps = lib.dependencies

        if deps != None:
            for libr in deps:
                if self.equals(libr) == True:
                    return False
                    
        if deps == None:
            return True
        else:
            for libr in deps:
                return self.check_cycle(libr)

    def add_dependency(self, lib):
        """
        Add the given library as a dependency for this library. A library can 
        be added as a dependency if it is not in testing and another version of
        the same library is not already a dependency.
        A LibraryException is raised if the given library is not a valid
        dependency.
        Input:
            lib (Library): the dependency
        """
        assert isinstance(lib, Library)

        if self.dependencies == None:
            self.dependencies = []
        
        if lib.is_testing == True:
            raise LibraryException("Exception")
        
        for library in self.dependencies:
            if library.name == lib.name:
                raise LibraryException("Exception")

        if self.check_cycle(lib) == False:
            raise LibraryException("Exception")

        self.dependencies = self.dependencies + [lib]

    def get_dependencies(self, depth=0):
        """
        Produces the list of libraries that this library depends on. Libraries 
        with the same name but different versions can appear, but specific
        versions of libraries can only appear at most once.
        Input:
            depth (int): How many levels of dependencies to retrieve, given as a
                natural number. By default, depth = 0 and only produces the list
                of immediate dependencies for the library.
        Returns (list[Library]): The list of libraries that are dependencies for
            this library.
        """
        assert depth >= 0

        list_of_current_dependencies = []
        
        list_of_libraries = [self]

        for i in range(0, depth + 1):
            for libr in list_of_libraries:
                if libr.dependencies != None:
                    list_of_current_dependencies.extend(libr.dependencies)
            list_of_libraries.extend(list_of_current_dependencies)
        
        return list_of_libraries[1::]
        
        # return self.dependencies

    def update_dependency(self, lib):
        """
        Updates an existing dependency to a different version. The library must
        already be a dependency for this library and the update must be a 
        different version than the existing dependency.
        A LibraryException is raised if the given library cannot be updated.
        Input:
            lib (Library): different version of the dependency
        """
        assert isinstance(lib, Library)

        if lib.is_testing == True:
            raise LibraryException("Exception")

        existing_dep = []
        
        for libr in self.dependencies:
            if libr.name == lib.name:
                existing_dep.append(libr)

        if len(existing_dep) == 0:
            raise LibraryException("Exception")

        for libr in existing_dep:
            if libr.version.compare_version(lib.version) == 0:
                raise LibraryException("Exception")

        for idx, libr in enumerate(self.dependencies):
            if libr.name == lib.name:
                self.dependencies[idx] = lib
                
                
class LibraryHub:

    """
    A class for a registry managing libraries.
    """
    def __init__(self):
        """
        Create a new LibraryHub instance.
        """
        self.hub = {}
        


    def register_new_library(self,
                             name,  # Name of the library
                             version,  # Version number
                             is_testing = False,  # Is not ready to be used.
                             dependencies = None):
        """
        Creates a new Library and registers it with the LibraryHub for later
        lookup/use. Should raise a LibraryException is the Library version is 
        not exact (e.g. could match to more than one version stored) OR if the 
        exact Library already exists.
        Inputs:  
            name (str): The library name. Case sensitive  
            version(str): The exact library version number  
            is_testing(bool): If the library is not ready for use  
            dependencies (list[tuple[str,str]]): list of dependencies given as
            pairs (name, version requirement)
        Returns(Library): The newly created Library object
        """

        v = version.split(".")

        for idx, val in enumerate(v):
            if v[idx] != "":
                v[idx] = int(val)
            elif v[idx] == "":
                v.remove(v[idx])

        if len(v) < 3:
            raise LibraryException("Exception")

        deps_as_libs = []

        if dependencies != None:
            for idx, dep in enumerate(dependencies):
                if dep[1] == None:
                    deps_as_libs.append(self.find_latest_version(dep[0]))
                elif self.get_library(dep[0], dep[1]) == None:
                    raise LibraryException("Exception")
                else:
                    deps_as_libs.append(self.get_library(dep[0], dep[1]))

        Lib = Library(name, version, is_testing, deps_as_libs)


        if name in self.hub:
            for library in self.hub[name]:
                if Lib.compare_version(library) == 0:
                    raise LibraryException("Exception")

        if name in self.hub:
            self.hub[name].append(Lib)
        else:
            self.hub[name] = []
            self.hub[name].append(Lib)

        return Lib




    def find_latest_version(self, name, include_testing = False):
        """
        Find the latest version of a library name.  Should raise a
        LibraryException is the Library name cannot be found
        Inputs:  
            name(str): The name of the library  
            include_testing(bool): Consider testing libraries  
        Returns (Library): The largest version for a library name
        """
        
        if not name in self.hub:
            raise LibraryException("Exception")
 
        lst = self.hub[name]

        if include_testing == False:
            for library in lst:
                if not library.is_testing == False:
                    lst.remove(library)
                if len(lst) == 0:
                    return None
 
        latest_version = lst[0]

        for library in lst:
            if library.compare_version(latest_version) == 1:
                latest_version = library
 
        return latest_version

    def get_library(self, name, version_requirement):
        """
        Find a registered Library object by the name and version.
        If more than one registered version satisfies the version requirement,
        return the Library with the highest version number that satisfies the
        requirement and is not in testing.
        If only one registered version satisfies the requirment, return the
        library regardless if in testing or not. If version_requirement is
        exact, then only an exact match should be found.
        Inputs:  
          name (str): The library name to match. Case sensitive  
          version_requirement(str): The library version requirement  
        Returns (Library | None): The Library that satisfies the
        version_requirement. If more than one are registered, then the
        largest/highest one that is not testing should be returned.
        None is returned if no valid library can be found.
        """

        v = version_requirement.split(".")

        for idx, val in enumerate(v):
            if v[idx] != "":
                v[idx] = int(val)
            elif v[idx] == "":
                v.remove(v[idx])

        v = tuple(v)
        
        if name in self.hub:
            lst = self.hub[name]
        else:
            return None

        matches = LibraryHub()

        matches.hub[name] = []

        match = []

        for library in lst:
            if library.meets_version_req(version_requirement) == True:
                matches.hub[name].append(library)
                match.append(library)

        if len(matches.hub[name]) == 1:
            if len(v) == 3:
                for library in match:
                    if len(make_tuple(library.version.v)) == 3:
                        return match[0]
                    else:
                        return None
            else:
                return match[0]

        if len(match) == 0:
            return None

        istesting = []

        if len(matches.hub[name]) > 1:
            for library in match:
                if library.is_testing == True:
                    istesting.append(library)
            if len(istesting) == len(match):
                return None
            else:
                return matches.find_latest_version(name, False)

    def add_dependencies(self, name, version, dependencies): 
        """
        Add multiple dependencies to existing library. Dependencies are given in
        a list and specified as a pair of a name and version requirement. If
        version requirement is None, use the latest version not in testing.
        If no appropriate version of the dependency can be found, a 
        LibraryException should be raised.
        Input:
            name (str): Library name
            version (str): Exact library version
            dependencies (list[tuple(string,string)]): List of dependencies, 
                given as a pair of a library name and version requirement.
        """

        deps_as_libs = []

        if dependencies != None:
            for idx, dep in enumerate(dependencies):
                if dep[1] == None:
                    deps_as_libs.append(self.find_latest_version(dep[0]))
                elif self.get_library(dep[0], dep[1]) == None:
                    raise LibraryException("Exception")
                else:
                    deps_as_libs.append(self.get_library(dep[0], dep[1]))

        names = []
        for lib in deps_as_libs:
            names.append(lib.name)
        
        n = list(set(names))
        if len(n) < len(names):
            raise LibraryException("Exception")

        for lib in deps_as_libs:
            if lib.is_testing == True:
                raise LibraryException("Exception")

        lib = self.get_library(name, version)
        
        lib.dependencies.extend(deps_as_libs)




    def add_dependency(self, lib_name, lib_ver, dep_name, dep_ver = None):
        """
        Add a library dependency to existing library. 
        
        Should raise a LibraryException if at least one of the following hold:
        - the Library cannot be found, OR 
        - the version is not exact (e.g. could match to more than one version 
          stored), OR 
        - the dependency has is_testing is True. 
        Inputs:  
            lib_name (str): The library name to match. Case sensitive  
            lib_ver (str): The exact library version requirement  
            dep_name (str): The dependency name to match. Case sensitive  
            dep_ver (Optional[str]): The dependency version requirement. If
                None, use the latest version not in testing.
        """
        
        if len(make_tuple(lib_ver)) < 3:
            raise LibraryException("Exception")

        lib = self.get_library(lib_name, lib_ver)

        if lib == None:
            raise LibraryException("Exception")

        if dep_ver == None:
            dep = self.find_latest_version(dep_name)
        else:
            dep = self.get_library(dep_name, dep_ver)

        if dep == None:
            raise LibraryException("Exception")
        if dep.is_testing == True:
            raise LibraryException("Exception")

        for depens in lib.dependencies:
            if depens.name == dep_name:
                raise LibraryException("Exception")

        lib.dependencies.append(dep)



    def update_dependency(self, lib_name, lib_ver, dep_name, dep_ver = None):
        """
        Update an existing library dependency, given a version requirement. If
        the version requirement is partial, use the latest version satisfying
        the version requirement.
        Raise a LibraryException if an appropriate version cannot be found.
        Input:
            lib_name (str): Library with dependency to be updated
            lib_version (str): Exact library version
            dep_name (str): Name of dependency to be updated
            dep_version (Optional[str]): version to update dependency to if
                specified, latest version otherwise
        """
        
        lib = self.get_library(lib_name, lib_ver)

        if dep_ver == None:
            dep = self.find_latest_version(dep_name)
        else:
            dep = self.get_library(dep_name, dep_ver)

        lib.update_dependency(dep)
